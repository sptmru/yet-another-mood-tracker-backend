{
  "compilerOptions": {
    "module": "CommonJS",

    // project options
    // specifies which default set of type definitions to use ("DOM", "ES6", etc)
    "lib": [
      "ESNext",
      "dom"
    ],

    // .js (as well as .d.ts, .js.map, etc.) files will be emitted into this directory.,
    "outDir": "build",

    // Strips all comments from TypeScript files when converting into JavaScript — you rarely read compiled code so this saves space
    "removeComments": true,

    // Target environment. Most modern browsers support ES6, but you may want to set it to newer or older. (defaults to ES3)
    "target": "es2022",

    // Module resolution
    // Lets you set a base directory to resolve non-absolute module names.
    "baseUrl": "./",

    "skipLibCheck": true,

    // fixes some issues TS originally had with the ES6 spec where TypeScript treats CommonJS/AMD/UMD modules similar to ES6 module
    "esModuleInterop": true,

    // Pretty much always node for modern JS. Other option is "classic"
    "moduleResolution": "node",

    // A series of entries which re-map imports to lookup locations relative to the baseUrl
    "paths": {},

    // Source Map
    // enables the use of source maps for debuggers and error reporting etc
    "sourceMap": true,

    // Specify the location where a debugger should locate TypeScript files instead of relative source locations.
    // Set `sourceRoot` to  "/" to strip the build path prefix
    // from generated source code references.
    // This improves issue grouping in Sentry.
    "sourceRoot": "/",

    // Strict Checks
    // Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.
    "alwaysStrict": true,

    // pick up dead code paths
    "allowUnreachableCode": false,

    // In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.
    "noImplicitAny": false,

    // When strictNullChecks is true, null and undefined have their own distinct types, and you’ll get a type error if you try to use them where a concrete value is expected.
    "strictNullChecks": true,

    // Linter Checks
    "noImplicitReturns": true,

    // accessing index must always check for undefined
    "noUncheckedIndexedAccess": true,

    // Report errors on unused local variables.
    "noUnusedLocals": true,

    // Report errors on unused parameters in functions
    "noUnusedParameters": true,

    // TypeORM stuff
    // Enables experimental support for emitting type metadata for decorators.
    "emitDecoratorMetadata": true,

    // Enables experimental support for ES7 decorators.
    "experimentalDecorators": true,

    "inlineSources": true
  },
  "tsc-alias": {
    "resolveFullPaths": true,
    "verbose": false
  },
  "include": ["./**/*.ts"],
  "exclude": [
    "node_modules/**/*"
  ]
}
